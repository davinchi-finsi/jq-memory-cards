/**
 * @license jq-memory-game v1.1.0
 * (c) 2020 Finsi, Inc. Based on @Jonathan Tarnate https://codepen.io/jstarnate
 */

var s;(s=jQuery).widget("ui.memoryGame",{NAMESPACE:"memoryGame",_$board:null,_cards:null,_interactions:0,_flipped:[],_match:[],_completed:!1,_disableInteraction:!1,_$interactions:null,ON_START:"memoryGameStart",ON_CARD_FLIPPED:"memoryGameCardFlipped",ON_CARDS_CHECK:"memoryGameCardsCheck",ON_COMPLETE:"memoryGameComplete",options:{timeToWaitBetweenInteractions:1e3,shuffle:!0,selector:{interactions:"[data-jq-memory-game-interactions], [jq-memory-game-interactions]"},autoPair:!0,classes:{root:"jq-memory-game",disabled:"jq-memory-game--disabled",flipped:"jq-memory-game__card--flipped",completed:"jq-memory-game--completed",board:"jq-memory-game__board",match:"jq-memory-game__card--has-match",card:"jq-memory-game__card",cardBack:"jq-memory-game__card__back",cardFront:"jq-memory-game__card__front"},data:[]},_create:function(){this.element.addClass(this.options.classes.root),this._initialize()},_renderCard:function(t){var e,i;let a,o;o=null!=(null===(e=null==t?void 0:t.front)||void 0===e?void 0:e.src)?`<img src="${t.front.src}" alt="${t.front.alt}"/>`:"function"==typeof t.front?t.front(this,t):t.front,a=null!=(null===(i=null==t?void 0:t.back)||void 0===i?void 0:i.src)?`<img src="${t.back.src}" alt="${t.back.alt}"/>`:"function"==typeof t.back?t.back(this,t):t.back;const n=s(`<div class="${this.options.classes.cardBack}"></div>`),r=s(`<div class="${this.options.classes.cardFront}"></div>`),d=s(`\n                <div class="${this.options.classes.card}">\n                </div>\n            `);return a&&n.append(a),o&&r.append(o),d.append(n),d.append(r),d},_generateCards:function(){if(this._cards=this.options.data.reduce((s,t)=>{const e=this._renderCard(t);return e.data("card-id",t.id),s.push({id:t.id,$card:e}),this.options.autoPair&&s.push({id:t.id,$card:e.clone()}),s},[]),!this.autoPair){const s=this._cards.reduce((s,t)=>{let e=s[t.id];return null==e&&(e=[],s[t.id]=e),e.push(t),s},{});let t=[];for(let e in s){const i=s[e];2!=i.length&&t.push(`- id '${e}' has ${i.length} item/s (exactly 2 items required)`)}if(t.length>0)throw new Error("When the option 'autoPair' = false, all the items (cards) must be specified, 2 items for each id, but an incorrect number of items has been found:\n"+t.join("\n"))}},_renderBoard:function(){this._$board=s(`<div class="${this.options.classes.board}"></div>`),this.element.append(this._$board)},_initialize:function(){this._renderBoard(),this._generateCards(),this._$board.delegate("."+this.options.classes.card,"click."+this.NAMESPACE,this._onCardClick.bind(this)),this.reset()},_updateInteractions(s){this._interactions=s,this._$interactions&&this._$interactions.text(this._interactions)},_shuffle:function(s){for(let t=s.length-1;t>0;t--){const e=Math.floor(Math.random()*(t+1)),i=s[t];s[t]=s[e],s[e]=i}return s},_onCardClick:function(t){const e=s(t.currentTarget).data("cardIndex");this.flip(e)},_checkCards:function(){this._disableInteractions(!0),this._updateInteractions(this._interactions+1);const[s,t]=this._flipped;s.id==t.id?(s.$card.addClass(this.options.classes.match),t.$card.addClass(this.options.classes.match),this._match=this._match.concat(this._flipped)):setTimeout(()=>{s.$card.removeClass(this.options.classes.flipped),t.$card.removeClass(this.options.classes.flipped)},this.options.timeToWaitBetweenInteractions),this.element.trigger(this.ON_CARDS_CHECK,[this,s.id==t.id,this._interactions,this._flipped.slice()]),this._flipped=[],this._match.length==this._cards.length?(this.element.addClass(this.options.classes.completed),this._completed=!0,this.element.trigger(this.ON_COMPLETE,[this])):setTimeout(()=>{this._disableInteractions(!1)},this.options.timeToWaitBetweenInteractions)},_disableInteractions:function(s){this._disableInteraction=s,s?this._$cards.addClass(this.options.classes.disabled):this._$cards.removeClass(this.options.classes.disabled)},getInteractions:function(){return this._interactions},flip:function(s){if(!this.options.disabled&&!this._disableInteraction&&!this._completed){if(!(s>=0&&s-1<=this._cards.length))throw new Error("The required card for index "+s+" does not exist");{const t=this._cards[s];t.$card.addClass(this.options.classes.flipped),this._flipped.push(t),this.element.trigger(this.ON_CARD_FLIPPED,[this,t]),this._flipped.length>=2&&this._checkCards()}}},reset(){this._disableInteraction=!1,this._flipped=[],this._match=[],this._completed=!1,this._$interactions=this.element.find(this.options.selector.interactions),this.element.removeClass(this.options.classes.completed),this._updateInteractions(0),this.options.shuffle&&(this._cards=this._shuffle(this._cards));const s=this._cards.map((s,t)=>(s.$card.data("cardIndex",t),s.$card));this._$board.append(s),this._$cards=this._$board.find("."+this.options.classes.card),this._$cards.removeClass([this.options.classes.flipped,this.options.classes.match,this.options.classes.disabled]),this.element.trigger(this.ON_START,[this])},destroy:function(){this.element.removeClass([this.options.classes.root,this.options.classes.disabled,this.options.classes.completed]),this._$options.off("."+this.NAMESPACE),this._$board.remove(),this._super()},disable:function(){this.element.addClass(this.options.classes.disabled),this._disableInteractions(),this._super()},enable:function(){this.element.removeClass(this.options.classes.disabled),this._enableInteractions(),this._super()}});
